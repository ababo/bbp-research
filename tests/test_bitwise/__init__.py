import bitwise
import pytest
import torch


def test_bit_count_map():
    batch = bitwise.tensor(
        [
            [
                "01110111011100000100001111010101_00001110100111001101101001101101",
                "01110111011100000110001111110101_00001110100111001101101001101101",
            ],
            [
                "01110111011101100100001111010101_10101110100111001101101001101101",
                "01110111011100000100001111011101_11001110101111111101101001101101",
            ],
        ]
    )

    result = bitwise.bit_count_map(batch)

    expected = torch.tensor(
        [[[17, 17], [19, 17]], [[19, 19], [18, 22]]], dtype=torch.int32
    )

    assert torch.equal(result, expected)


def test_bitwise_and_across_batch():
    batch = bitwise.tensor(
        [
            [
                "01001001111100000000101001000000_00000000101101000011111000011001",
                "11000000000110101110100100110000_00001010100101010000010101101011",
            ],
            [
                "01000101011100000111001011110110_00010100100110101010111101000101",
                "00001000011111100000101111001101_01100100111001010100111110010000",
            ],
            [
                "11111111111111111111111111111111_11111111111111111111111111111110",
                "11111111111011111111111111111111_11111111111111111111111111111111",
            ],
        ]
    )

    result = bitwise.bitwise_and_across_batch(batch)

    expected = bitwise.tensor(
        [
            "01000001011100000000001001000000_00000000100100000010111000000000",
            "00000000000010100000100100000000_00000000100001010000010100000000",
        ]
    )

    assert torch.equal(result, expected)


def test_bitwise_or_across_batch():
    batch = bitwise.tensor(
        [
            [
                "01001001111100000000101001000000_00000000101101000011111000011001",
                "11000000000110101110100100110000_00001010100101010000010101101011",
            ],
            [
                "01000101011100000111001011110110_00010100100110101010111101000101",
                "00001000011111100000101111001101_01100100111001010100111110010000",
            ],
            [
                "10000000000000000000000000000000_00000000000000000000000000000000",
                "00000000000000000000000000000000_10000000000000000000000000000000",
            ],
        ]
    )

    result = bitwise.bitwise_or_across_batch(batch)

    expected = bitwise.tensor(
        [
            "11001101111100000111101011110110_00010100101111101011111101011101",
            "11001000011111101110101111111101_11101110111101010100111111111011",
        ]
    )

    assert torch.equal(result, expected)


def test_identity_matrix():
    result = bitwise.identity_matrix(36, 34)

    expected = bitwise.tensor(
        [
            "1000000000000000000000000000000000",
            "0100000000000000000000000000000000",
            "0010000000000000000000000000000000",
            "0001000000000000000000000000000000",
            "0000100000000000000000000000000000",
            "0000010000000000000000000000000000",
            "0000001000000000000000000000000000",
            "0000000100000000000000000000000000",
            "0000000010000000000000000000000000",
            "0000000001000000000000000000000000",
            "0000000000100000000000000000000000",
            "0000000000010000000000000000000000",
            "0000000000001000000000000000000000",
            "0000000000000100000000000000000000",
            "0000000000000010000000000000000000",
            "0000000000000001000000000000000000",
            "0000000000000000100000000000000000",
            "0000000000000000010000000000000000",
            "0000000000000000001000000000000000",
            "0000000000000000000100000000000000",
            "0000000000000000000010000000000000",
            "0000000000000000000001000000000000",
            "0000000000000000000000100000000000",
            "0000000000000000000000010000000000",
            "0000000000000000000000001000000000",
            "0000000000000000000000000100000000",
            "0000000000000000000000000010000000",
            "0000000000000000000000000001000000",
            "0000000000000000000000000000100000",
            "0000000000000000000000000000010000",
            "0000000000000000000000000000001000",
            "0000000000000000000000000000000100",
            "0000000000000000000000000000000010",
            "0000000000000000000000000000000001",
            "1000000000000000000000000000000000",
            "0100000000000000000000000000000000",
        ]
    )

    assert torch.equal(result, expected)


def test_mask_rows():
    batch_size = 2
    num_rows = 34
    matrices = torch.randint(0, 2**32, size=(batch_size, num_rows, 2)).to(
        dtype=torch.int32
    )

    bit_masks = [
        ["01110011100010011111000110001111_101"],
        ["11101001001111000001001011111001_010"],
    ]
    bool_masks = [
        [bool(int(bit)) for bit in mask[0].replace("_", "")] for mask in bit_masks
    ]
    bit_masks = bitwise.tensor(bit_masks)

    result = bitwise.mask_rows(matrices, bit_masks)

    for batch in range(batch_size):
        for row in range(num_rows):
            if bool_masks[batch][row]:
                assert torch.equal(result[batch, row], matrices[batch, row])
            else:
                assert torch.all(result[batch, row] == 0)


def test_pack():
    # fmt: off
    tensor = torch.tensor(
        [
            [0,2,1,1,0,0,1,1,1,0,0,0,1,0,0,1,1,1,1,1,0,0,0,1,1,0,0,0,1,1,1,1,0,0,0,1,],
            [0,1,2,1,0,0,1,0,1,0,0,0,1,0,0,1,1,1,1,1,0,0,0,1,1,0,0,0,1,1,1,1,0,0,1,1,],
            [0,1,1,2,0,0,1,1,0,0,0,0,1,0,0,1,1,0,1,1,0,0,0,1,1,0,0,0,1,1,1,1,0,1,0,0,],
            [0,1,1,1,0,0,2,1,1,0,0,0,1,0,0,1,1,1,0,1,0,0,0,1,1,0,0,0,1,1,1,1,0,1,0,1,]
        ],
        dtype=torch.int32
    )
    # fmt: on

    packed_tensor = bitwise.pack(tensor)
    expected_tensor = torch.tensor(
        [
            [0b01110011100010011111000110001111, 0b00010000000000000000000000000000],
            [0b01110010100010011111000110001111, 0b00110000000000000000000000000000],
            [0b01110011000010011011000110001111, 0b01000000000000000000000000000000],
            [0b01110011100010011101000110001111, 0b01010000000000000000000000000000],
        ],
        dtype=torch.int32,
    )
    assert torch.equal(packed_tensor, expected_tensor)

    tensor = torch.cat([tensor, tensor, tensor.to(dtype=torch.bool)])
    packed_tensor = bitwise.pack(tensor)
    expected_tensor = torch.cat([expected_tensor, expected_tensor, expected_tensor])
    assert torch.equal(packed_tensor, expected_tensor)


def test_tensor():
    with pytest.raises(ValueError):
        bitwise.tensor("100a1")

    with pytest.raises(ValueError):
        bitwise.tensor(["1001", "111"])

    t = bitwise.tensor(
        [
            "00000000000000000000000000000001_00000000000000000000000000000010_00000000000000000000000000000011",
            "00000000000000000000000000000100_00000000000000000000000000000101_00000000000000000000000000000110",
        ]
    )
    assert torch.equal(t, torch.tensor([[1, 2, 3], [4, 5, 6]], dtype=torch.int32))

    t = bitwise.tensor(
        [
            [
                ["00000000000000000000000000000001_00000000000000000000000000000010"],
                ["00000000000000000000000000000011_00000000000000000000000000000100"],
                ["00000000000000000000000000000101_00000000000000000000000000000110"],
            ]
        ]
    )
    assert torch.equal(
        t, torch.tensor([[[[1, 2]], [[3, 4]], [[5, 6]]]], dtype=torch.int32)
    )

    t = bitwise.tensor("11111111111111111111111111111111")
    assert torch.equal(t, torch.tensor([-1], dtype=torch.int32))


def test_to_str():
    def normalize(str):
        return str.replace(" ", "").replace("\n", "")

    tensor = torch.tensor(
        [
            407139328,
            -1982813267,
            843441078,
            108726849,
            -10323656,
            173959735,
            -381938951,
            -175616970,
            1377084921,
            -2028039310,
            871358455,
            1365780341,
            -927213573,
            -1781469318,
            -783942132,
            -1926737959,
            -404105690,
            1701787553,
            -1250124889,
            -385604684,
            406169558,
            518249499,
            -1327211798,
            -1367402117,
            -1557588875,
            1487394174,
            -2019961069,
            30992897,
            40452938,
            -1742496861,
            275239029,
            0,
        ]
    ).reshape(32, 1)

    str = """['00011000010001000111010000000000'
 '10001001110100001010101110101101'
 '00110010010001011110001110110110'
 '00000110011110110000101001000001'
 '11111111011000100111100100111000'
 '00001010010111100110101000110111'
 '11101001001111000001001011111001'
 '11110101100010000100110000110110'
 '01010010000101001010010111111001'
 '10000111000111101001001101110010'
 '00110011111011111101111111110111'
 '01010001011010000010011101110101'
 '11001000101110111101011111111011'
 '10010101110100001110111101111010'
 '11010001010001011111111000001100'
 '10001101001010000100111111011001'
 '11100111111010011101011000100110'
 '01100101011011110011011110100001'
 '10110101011111001001101110100111'
 '11101001000001000010001110110100'
 '00011000001101011010011111010110'
 '00011110111000111101110000011011'
 '10110000111001000101101011101010'
 '10101110011111110001100101111011'
 '10100011001010010001010001110101'
 '01011000101001111101010101111110'
 '10000111100110011101011100010011'
 '00000001110110001110101000000001'
 '00000010011010010100001101001010'
 '10011000001000111001101110100011'
 '00010000011001111101000001110101'
 '00000000000000000000000000000000']"""
    assert normalize(bitwise.to_str(tensor)) == normalize(str)
